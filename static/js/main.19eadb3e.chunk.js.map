{"version":3,"sources":["CountryPicker.js","Stat.js","App.js","serviceWorker.js","index.js"],"names":["CountryPicker","props","state","countries","handleChange","bind","className","onChange","this","map","country","key","value","e","onCountryChange","target","fetch","then","result","json","data","setState","obj","Country","sort","React","Component","Stat","name","number","App","deaths","confirmed","recovered","date","handleCountryChange","fetchData","url","console","log","length","Deaths","Confirmed","Recovered","Date","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qUAqCeA,G,8DAjCf,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACPC,UAAW,IAEjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALH,E,qDASf,OACF,8BACE,+BACE,4BAAQC,UAAU,SAASC,SAAUC,KAAKJ,cACtCI,KAAKN,MAAMC,UAAUM,KAAI,SAACC,GAAD,OAAa,4BAAQJ,UAAU,SAASK,IAAKD,EAASE,MAAOF,GAAUA,EAA1D,a,mCAOnCG,GACXL,KAAKP,MAAMa,gBAAgBD,EAAEE,OAAOH,S,qKAItB,uC,SACNI,MADM,wCAEXC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAClB,UAAWiB,EAAKX,KAAI,SAAAa,GAAG,OAAIA,EAAIC,WAASC,Y,sGA7B7CC,IAAMC,YCcnBC,G,wDAZb,WAAY1B,GAAQ,uCACVA,G,qDAIR,OACE,yBAAKK,UAAU,OAAOE,KAAKP,MAAM2B,KAAjC,IAAuC,gCAAMpB,KAAKP,MAAM4B,OAAjB,U,GAR1BJ,IAAMC,YCyDVI,E,kDArDb,WAAY7B,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACQ,QAAS,GAAIqB,OAAQ,EAAGC,UAAU,EAAGC,UAAU,EAAGC,KAAM,IAEtE,EAAKC,oBAAsB,EAAKA,oBAAoB9B,KAAzB,gBAC3B,EAAK+B,UAAY,EAAKA,UAAU/B,KAAf,gBALA,E,qDAUnB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,UAChB,wCAIF,kBAAC,EAAD,CAAeQ,gBAAiBN,KAAK2B,sBACvC,0BAAM7B,UAAY,QAClB,kBAAC,EAAD,CAAMsB,KAAO,YAAYC,OAAQrB,KAAKN,MAAM+B,YAC9C,kBAAC,EAAD,CAAML,KAAO,YAAYC,OAAQrB,KAAKN,MAAM8B,YAC9C,kBAAC,EAAD,CAAMJ,KAAK,SAASC,OAAQrB,KAAKN,MAAM6B,UAGnC,4BAAQzB,UAAY,UAApB,gBACcE,KAAKN,MAAMgC,S,mFAMDxB,G,iFAClBF,KAAKa,SAAS,CAACX,QAASA,I,uBACxBF,KAAK4B,Y,uQAILC,EAAM,2CAA6C7B,KAAKN,MAAMQ,QACpE4B,QAAQC,IAAIF,G,SACNrB,MAAMqB,GACXpB,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAG,GAAI,OAAIA,EAAKoB,OAAS,EAAKnB,SAC/B,CAAEU,OAAQX,EAAKA,EAAKoB,OAAO,GAAGC,OAC5BT,UAAWZ,EAAKA,EAAKoB,OAAO,GAAGE,UAC/BT,UAAWb,EAAKA,EAAKoB,OAAO,GAAGG,UAC/BT,KAAMd,EAAKA,EAAKoB,OAAO,GAAGI,OACvB,EAAKvB,SAAS,CAAEU,OAAQ,EAAGC,UAAW,EAAGC,UAAW,EAAGC,KAAK,Q,2GAhDrDT,IAAMC,WCOJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.19eadb3e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './CountryPicker.css';\r\n\r\nclass CountryPicker extends React.Component {\r\nconstructor(props) {\r\n  super(props);\r\n  this.state = {\r\n        countries: []\r\n  }\r\n  this.handleChange = this.handleChange.bind(this);\r\n}\r\n\r\n  render() {\r\n    return (\r\n  <form>\r\n    <label>\r\n      <select className=\"select\" onChange={this.handleChange}>\r\n        { this.state.countries.map((country) => <option className=\"option\" key={country} value={country}>{country} </option>) }\r\n        </select>\r\n  </label>\r\n</form>\r\n);\r\n}\r\n\r\nhandleChange(e) {\r\n  this.props.onCountryChange(e.target.value);\r\n}\r\n\r\nasync componentDidMount() {\r\n    const url = 'https://api.covid19api.com/countries';\r\n    await fetch(url)\r\n    .then(result => result.json())\r\n    .then(data => this.setState({countries: data.map(obj => obj.Country).sort()}))\r\n  }\r\n\r\n}\r\n\r\nexport default CountryPicker;\r\n","import React from 'react';\r\nimport './Stat.css';\r\n\r\nclass Stat extends React.Component {\r\n\r\n  constructor(props) {\r\n      super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='Box'>{this.props.name} <h2> {this.props.number} </h2></div>\r\n);\r\n  }\r\n\r\n}\r\n\r\nexport default Stat;\r\n","import React from 'react';\nimport './App.css';\nimport CountryPicker from './CountryPicker'\nimport Stat from './Stat'\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {country: '', deaths: 0, confirmed:0, recovered:0, date: ''};\n\n    this.handleCountryChange = this.handleCountryChange.bind(this);\n    this.fetchData = this.fetchData.bind(this);\n\n  }\n\n  render() {\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <p>\n          COVID 19\n        </p>\n      </header>\n      <CountryPicker onCountryChange={this.handleCountryChange} />\n    <body className = \"body\">\n    <Stat name = 'recovered' number={this.state.recovered}/>\n  <Stat name = 'confirmed' number={this.state.confirmed}/>\n<Stat name='deaths' number={this.state.deaths}/>\n\n    </body>\n    <footer className = \"footer\">\n    Update date: {this.state.date}\n  </footer>\n    </div>\n  );\n  }\n\n  async handleCountryChange(country) {\n    await this.setState({country: country});\n    await this.fetchData()\n  }\n\n  async fetchData() {\n    const url = 'https://api.covid19api.com/live/country/' + this.state.country;\n    console.log(url);\n    await fetch(url)\n    .then(result => result.json())\n    .then(data => data.length ? this.setState(\n      { deaths: data[data.length-1].Deaths,\n        confirmed: data[data.length-1].Confirmed,\n        recovered: data[data.length-1].Recovered,\n        date: data[data.length-1].Date\n      }) : this.setState({ deaths: 0, confirmed: 0, recovered: 0, date:''}))\n  }\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}